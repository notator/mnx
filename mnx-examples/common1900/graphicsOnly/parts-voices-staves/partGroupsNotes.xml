
======================================================================================
### How to group parts - a proposal

I'm using the following conventions:
- lowercase Camel case for all element and attribute names. XML naming conventions weren't so clear in the 1980s when MusicXML started out, but I think the use of '-' characters in names is now widely deprecated. See, for example, https://www.w3schools.com/xml/xml_elements.asp ("Best Naming Practices" and "Naming Styles"). §4 of the [Google XML Document Format Style Guide](https://google.github.io/styleguide/xmlstyle.html) insists on lowercase Camel case.
- There's a containing element around lists of similar elements, especially where the list is potentially rather long. XML was designed to be both machine _and human_ readable, and modern tools for editing XML allow such container elements to be collapsed for a better overview of the file. I first came across this convention when working with [capella's CapXML](https://en.wikipedia.org/wiki/Capella_(notation_program)). It can be very useful.

---

Here's my current proposal for the general structure of an `<mnx-common>` element.
The component elements are described in further detail below.
```
<mnx-common>
    <!-- like the globals defined in §6.1.7 in the current spec -->
    <globals>
        <global>...</global>
        <!-- etc., more global definitions -->
    </globals>

    <!-- like the parts defined in §6.1.7 in the current spec -->
    <parts>
        <part id="fl1" name="Flute 1" >...</part>
        <!-- contains <measure>s etc. -->
        <part id="fl2" name="Flute 2" >...</part>
        <part id="fl3" name="Flute 3" >...</part>
        <part id="pno" name="Piano">...</part>
        <!-- etc., more part definitions -->
    </parts>

    <!-- global systemLayout-definitions (optional) -->
    <systemLayouts>
        <systemLayout id="globalSysLayout1">... </systemLayout>
        <systemLayout id="globalSysLayout2">... </systemLayout>
        <systemLayout id="globalSysLayout3">... </systemLayout>
        <!-- etc., more global systemLayout definitions -->
    </systemLayouts>

    <!-- all the scores in this mnx-common element -->
    <scores>

        <score name="Full Score">
            <!-- optional globals for the full score  -->
            <globals>...</globals>
            <!-- systemLayout-definitions for the full score  -->
            <systemLayouts>
                <systemLayout id="fullScoreSysLayout1">...</systemLayout>
                <systemLayout id="fullScoreSysLayout2">...</systemLayout>
                <systemLayout id="fullScoreSysLayout3">...</systemLayout>
                <!-- etc. more systemLayout elements -->
            </systemLayouts>
            <!-- scoreLayout for the full score -->
            <scoreLayout>...</scoreLayout>
        </score>

        <score name="Flute 1 part">
            <!-- optional globals for the flute 1 part -->
            <globals>...</globals>
            <!-- systemLayout-definitions for the flute 1 part -->
            <systemLayouts>
                <systemLayout id="flute1SysLayout1">...</systemLayout>
                <systemLayout id="flute1SysLayout2">...</systemLayout>
                <!-- etc. more systemLayout elements -->
            </systemLayouts>
            <!-- scoreLayout for the flute 1 part-->
            <scoreLayout>...</scoreLayout>
        </score>

        <score name="Flute 2 part">...</score>
        <score name="Flute 3 part">...</score>
        <!-- etc., all the part "scores" (booklets) -->
    </scores>
</mnx-common>
```
#### The `<globals>` element
The `<globals>` element contains a list of `<global>` definitions. These are the `<global>` elements, as defined in [§6.1.7](https://w3c.github.io/mnx/specification/common/#the-mnx-common-element) and [§6.1.8](https://w3c.github.io/mnx/specification/common/#the-global-element) in the current spec.

#### The `<parts>` element
The `<parts>` element contains a list of `<part>` definitions. These are the `<part>` elements, (nearly) as defined in [§6.1.7](https://w3c.github.io/mnx/specification/common/#the-mnx-common-element) and [§6.1.9](https://w3c.github.io/mnx/specification/common/#the-part-element) of the current spec. Each of the `<part>` elements has an `id` and a `name` attribute. (The `name` attribute is probably redundant.) The `<part><part-name>` and `<part><part-abbreviation>` elements defined in [§6.11 of the spec](https://github.com/w3c/mnx/issues/185#issuecomment-640018187) _are_ redundant because I'm naming _staves_ (not parts) in `<score><systemLayout><staffGroup><staff>` elements (see below).  The Spec's `<part><instrumentSound>` element needs to be discussed in a separate issue.
Note that `<part>` definitions can use multiple staves (they can have `<measure><sequence> staff` attributes) but that the bracket printed to the left of a system is defined in the `<systemLayout><staffgroup>` that uses the `<part>` (i.e. not in the `<part>` definition).
Here's how `<parts>` looks in more detail:
```
<parts>
    <part id="fl1" name="Flute 1">
        <measure>...</measure>
        <measure>...</measure>
        <measure>...</measure>
        <!-- etc. more measures -->
    </part>
    <part id="pno1 name="Piano 1">
        <measure>...</measure>
        <measure>...</measure>
        <measure>...</measure>
        <!-- etc. more measures -->
    </part>
    <part ... >...</part>
    <!-- etc. more parts -->
</parts>
```
#### The global `<systemLayouts>` element
This is an optional element that contains a list of  `<systemLayout>` elements that can be used by any of the scores in scope. It has the same structure as the `<score><systemLayouts>` element (described below).
A simple `<systemLayout>`, having a single staff with no name to its left could, for example, be defined here for all part scores (booklets).

#### The  `<scores>` element
This contains a list of all the scores in this `<mnx-common>` element.
Note that:
- All the scores in this `<mnx-common>` element have the same number of measures.
- The `<mnx><collection>` element can contain more than one `<score><mnx-common>` element, so this file could contain different "movements" of the same piece defined _there_. 
```
<scores>
    <score name="Full Score">... </score>
    <score name="Flute 1 part">... </score>
    <score name="Flute 2 part">... </score>
    <score name="Flute 3 part">... </score>
    <score name="Piano part">... </score>
    <score name="Full Score arranged for piano">... </score>
    <score name="Full Score arranged for choir and piano">... </score>
    <!-- etc. all the scores -->
</scores>
```

#### The `<score>` element
The basic structure looks like this:
```
<score name="Full Score">
    <globals>...</globals> <!-- optional "global" elements, like §6.1.7, but special to this score -->
    <systemLayouts>...</systemLayouts> <!-- see below -->
    <scoreLayout>...</scoreLayout> <!-- see below -->
</score>
```

#### The `<systemLayouts>` element
Contains a list of `<systemLayout>` elements. These can be referenced (and used in any order) by the local `<scoreLayout>` element.
```
<systemLayouts>
    <systemLayout id="fullScoreSysLayout1">...</systemLayout>
    <systemLayout id="fullScoreSysLayout2">...</systemLayout>
    <systemLayout id="fullScoreSysLayout3">...</systemLayout>
    <!-- more systemLayout elements
</systemLayouts>
```
#### The `<systemLayout>` element
A `<systemLayout>` is a list of `<staffGroup>` elements in top-to-bottom order.
The `<staffGroup> bracket` attribute determines the shape of the bracket, to the left of the system, enclosing the `<staffGroup>`.
The `<staffGroup> barline` attribute decides whether or not a barline should be drawn through the whole `<staffGroup>` (The barline's _type_ is decided elsewhere).
```
<systemLayout id="sysLayout1" staffLabelsTextAlign="center">
    <staffGroup name="woodwind" bracket="brace" barline="yes">...</staffGroup>
    <staffGroup name="brass" bracket="brace" barline="no">...</staffGroup>
    <staffGroup name="percussion" bracket="brace" barline="no">...</staffGroup>
    <staffGroup name="soloPiano" bracket="curly" barline="yes">...</staffGroup>
    <staffGroup name="strings"bracket="brace" barline="yes">...</staffGroup>
    <!-- more staffGroup elements -->
</systemLayout>
```
#### The `<staffGroup>` element
[begin Edit 12.06.2020]
Added `displayName` attribute to `<staffGroup>`. When present and equal to "no", this makes the `name` attribute invisible.
[end Edit 12.06.2020

**Parts are being grouped here _by staff_**. The staves are grouped by system, the systems by page and the pages by score (see below).
`<staffGroup>` elements can nest. The innermost level is a list of `<staff>` elements that reference `<part>` elements by ID.
Note: I have never seen a full score containing staves that have more than two voices per staff, except perhaps in staves belonging to the same part.
Here is how @bhamblok's example at https://github.com/w3c/mnx/issues/185#issuecomment-639477071 would be coded (with each of the horns in a separate voice on the two staves, but with trombones 1 and 2 in the same voice -- possibly notated as 2-part chords):
![brassGroup](https://user-images.githubusercontent.com/1655500/84488632-c8184500-aca0-11ea-8c00-c28709c9963b.png)

```
<staffGroup name="brass" bracket="brace" barline="no" displayName="no">
    <staffGroup name="Horns in F" bracket="curly" barline="yes">
        <staff name="1\n2">
            <voice partIDs="hn1" />
            <voice partIDs="hn2" />
        </staff>
        <staff name="3\n4">
            <voice partIDs="hn3" />
            <voice partIDs="hn4" />
        </staff>
    </staffGroup>
    <staffGroup name="Trumpets in C" bracket="none" barline="yes">
        <staff name="1\n2">
            <voice partIDs="tp1 tp2" />
        </staff>
    </staffGroup>
    <staffGroup name="Trombones" bracket="curly" barline="yes">
        <staff name="1\n2">
            <voice partIDs="tb1 tb2" />
        </staff>
        <staff name="3">
            <voice partIDs="tb3" />
        </staff>
    </staffGroup>
    <staffGroup name="Tuba" bracket="none" barline="yes">
        <staff name="">
            <voice partIDs="tubaID" />
        </staff>
    </staffGroup>
</staffGroup>
```
[begin Edit 12.06.2020] - new version of the Solo Piano  `<staffGroup>`

A Solo Piano `<staffGroup>` looks like this:
```
<staffGroup name="Piano" partID="soloPianoPartID" bracket="curly" barline="yes" />
```
The number of staves and voices depends on the Solo Piano's `<part><measure><sequence>` elements. Note that the number of staves and/or voices is not part of the `<systemLayout>` definition, and can change for each use of the `<systemLayout>` to which this `<staffGroup>` belongs.
There needs to be an option somewhere, that determines whether the number of staves can change per `<measure>` (i.e. during the course of a `<system>`) or not.
(As always, solutions to problems like this need to be tested by an _MNX-Common by Example_ example.)

[end Edit 12.06.2020]

#### The `<scoreLayout>` element
 This element is a list of `<page>` elements, each of which contains a list of `<system>` elements.
`<score-layout>` could actually be re-named `<pages>`:
```
<scoreLayout width="500px" height="707px" margins="30px"> <!-- for printing on portrait A3 or A4 -->
    <page>
        <systems>
            <system startMeasureNumber="1" systemLayoutID="sysLayout1" />
            <system startMeasureNumber="6" systemLayoutID="sysLayout1" />
            <system startMeasureNumber="10" systemLayoutID="sysLayout1" />
            <system startMeasureNumber="13" systemLayoutID="sysLayout2" />
            <system startMeasureNumber="18" systemLayoutID="sysLayout1" />
            <!-- etc. more systems -->
        </systems>
    </page>
    </ etc. more pages -->
</scoreLayout>
```
Notes:
- The `<page>` element could have an optional `index` attribute (like the Spec's `<measure>` element), but I think that's a mistake in both cases. Such indices can be deduced from the list of `<page>`  (or `<measure>`) elements. I think that stipulating page numbers is a maintenance problem.
- The width/height proportion can be different for the score and parts (they have different `<scoreLayout>`s).
- If this score is printed on paper that does not have the same width/height proportion as the A-series, then it will either have wider left and right margins or wider top and bottom margins.
- This `<scoreLayout>` definition does not stipulate fonts or font sizes. It simply assumes that consuming applications will be able to find settings for those that allow all the systems to have the same width, and to have heights that allow them to fit vertically on the given pages. Applications can, of course, ignore the given page breaks, and provide their own. An important application of this freedom is the writing of scores on a single page that has unlimited height (a "scroll" score). Such scores are useful for viewing on screens.

---
It would be quite straightforward to translate this proposal into a formal **XML-_Schema_** . That might be easier to track than the current spec's approach of defining different element types in different sections of the Spec.

Feedback and suggested changes welcome, of course!
-->